{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","title","year","summary","poster","genres","className","src","alt","slice","map","index","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"mRAiMeA,MA/Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC3C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKP,EAAOA,MAAOA,IACrC,sBAAKK,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BL,IAC9B,oBAAIK,UAAU,cAAd,SAA6BJ,IAC7B,oBAAGI,UAAU,iBAAb,UAA+BH,EAAQM,MAAM,EAAG,KAAhD,SACA,oBAAIH,UAAU,gBAAd,SACKD,EAAOK,KAAI,SAACL,EAAQM,GACjB,OACI,oBAAgBL,UAAU,eAA1B,SACKD,GADIM,eCqBtBC,G,kNAlDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAIVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,4DALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAGZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IANzB,2C,uDAUZ,WACEQ,KAAKN,c,oBAIP,WAAU,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAAST,UAAU,YAAnB,SACGQ,EACC,qBAAKR,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGS,EAAOL,KAAI,SAAAa,GAAK,OACf,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVtB,KAAMqB,EAAMrB,KACZD,MAAOsB,EAAMtB,MACbE,QAASoB,EAAMpB,QACfC,OAAQmB,EAAME,mBACdpB,OAAQkB,EAAMlB,QANTkB,EAAMC,e,GAlCTE,IAAMC,YCzIxBC,IAASC,OAAQ,cAAE,EAAF,IAAYC,SAASC,eAAe,W","file":"static/js/main.952ee1df.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// css 임포트\nimport './Movie.css';\n\n\n// Movie 컴포넌트 기본 구조 작성하기\n// function Movie() {\n//     return <h1></h1>;\n// }\n\n// Movie.PropTypes = {};\n\n\n// https://yts-proxy.now.sh/list_movies.json 에서 필요한 데이터의 키 찾기 + propTypes 작성하기\n// function Movie() {\n//     return <h1></h1>;\n// }\n\n// Movie.PropTypes = {\n//     id: PropTypes.number.isRequired,\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n// };\n\n\n// https://yts.mx/api#list_movies 에서 정렬하기 위한 요소 찾기\n// https://yts-proxy.now.sh/list_movies.json?sort_by=rating&order_by=asc 의 결과 확인\n\n\n// Movie 컴포넌트에 props 추가하기\n// function Movie({ id, title, year, summary, poster }) {\n//     return <h4>{title}</h4>;\n// }\n\n\n// Movie.propTypes = {\n//     id: PropTypes.number.isRequired,\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n// };\n\n\n//Movie 컴포넌트에 HTML (css를 입히기 위한 class 정의) 추가 + id props 삭제 + style={{ backgroundColor: 'red'}} 바로 적용해보기 \n// function Movie({title, year, summary, poster }) {\n//     return (\n//         <div class=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div class=\"movie__data\">\n//                 <h3 class=\"movie__title\">{title}</h3>\n//                 <h5 class=\"movie__year\">{year}</h5>\n//                 <p class=\"movie__summary\">{summary}</p>\n//             </div>\n//         </div>\n//     );\n// }\n\n\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n// };\n\n\n// 7주차 시작 - 장르 컴포넌트 추가하기 (API 에서 장르의 type 확인) + 에러 확인 (class, genres) + className 수정하기\n// function Movie({title, year, summary, poster, genres }) {\n//     return (\n//         <div className=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div className=\"movie__data\">\n//                 <h3 className=\"movie__title\">{title}</h3>\n//                 <h5 className=\"movie__year\">{year}</h5>\n//                 <p className=\"movie__summary\">{summary}</p>\n//             </div>\n//         </div>\n//     );\n// }\n\n\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired,\n//     genres: PropTypes.arrayOf(PropTypes.string).isRequired\n// };\n\n\n// 배열 형태로 담긴 장르 데이터를 리스트로 출력하기 + key 에러 확인\n// function Movie({title, year, summary, poster, genres }) {\n//     return (\n//         <div className=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div className=\"movie__data\">\n//                 <h3 className=\"movie__title\">{title}</h3>\n//                 <h5 className=\"movie__year\">{year}</h5>\n//                 <p className=\"movie__summary\">{summary}</p>\n//                 <ul className=\"movie__genres\">\n//                     {genres.map(genres => {\n//                         return (\n//                             <li className=\"movie__genres\">{genres}</li>\n//                         )\n//                     })}\n//                 </ul>\n//             </div>\n//         </div>\n//     );\n// }\n\n\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired,\n//     genres: PropTypes.arrayOf(PropTypes.string).isRequired\n// };\n\n\n// key 에러 수정\n// function Movie({ title, year, summary, poster, genres }) {\n//     return (\n//         <div className=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div className=\"movie__data\">\n//                 <h3 className=\"movie__title\">{title}</h3>\n//                 <h5 className=\"movie__year\">{year}</h5>\n//                 <p className=\"movie__summary\">{summary}</p>\n//                 <ul className=\"movie__genres\">\n//                     {genres.map((genres, index) => {\n//                         return (\n//                             <li key={index} className=\"movie__genre\">\n//                                 {genres}\n//                             </li>\n//                         )\n//                     })}\n//                 </ul>\n//             </div>\n//         </div>\n//     );\n// }\n\n\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired,\n//     genres: PropTypes.arrayOf(PropTypes.string).isRequired\n// };\n\n\n// css 꾸미기 : App.css 와 Movie.css\n\n\n// 화면에 보이는 문자 줄이기\nfunction Movie({ title, year, summary, poster, genres }) {\n    return (\n        <div className=\"movie\">\n            <img src={poster} alt={title} title={title} />\n            <div className=\"movie__data\">\n                <h3 className=\"movie__title\">{title}</h3>\n                <h5 className=\"movie__year\">{year}</h5>\n                <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n                <ul className=\"movie__genres\">\n                    {genres.map((genres, index) => {\n                        return (\n                            <li key={index} className=\"movie__genre\">\n                                {genres}\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\n\nMovie.propTypes = {\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default Movie;","import React from 'react';\n// axios import 하기, axios : HTTP통신(API 호출)을 지원하는 Javascript 라이브러리\nimport axios from 'axios';\n// Movie 컴포넌트 임포트\nimport Movie from './Movie';\n// css 임포트\nimport './App.css';\n\n// 6주차 미진행 부분 계속\n// setState : state 내의 movies에 API 호출 결과인 response data(data.data.movies) 저장하기 + Movie 컴포넌트 만들러 가기\n// class App extends React.Component {\n//   state = {\n//     isLoading: true,\n//     movies: []\n//   };\n\n\n//   getMovies = async () => {\n//     const {\n//       data: {\n//         data: { movies }\n//       }\n//     } = await axios.get('https://yts-proxy.now.sh/list_movies.json');\n//     // this.setState({ movies: movies })\n//     // 객체키와 변수명이 같을 때 축약하기 \n//     // this.setState({ movies })\n//     // isLoding state도 변경하기\n//     this.setState({ movies, isLoading: false });\n//   };\n\n\n//   componentDidMount() {\n//     this.getMovies();\n//   }\n\n\n//   render() {\n//     const { isLoading } = this.state;\n//     return <div>{isLoading ? 'Loading...' : 'We are ready'}</div>;\n//   }\n// }\n\n\n// App 컴포넌트에서 Movie 컴포넌트 그리기 + map() 함수 사용하기 + Movie 컴포넌트를 반환하기 + Movie 컴포넌트에 props 전달하기   \n// class App extends React.Component {\n//   state = {\n//     isLoading: true,\n//     movies: []\n//   };\n\n\n//   getMovies = async () => {\n//     const {\n//       data: {\n//         data: { movies }\n//       }\n//     } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n//     this.setState({ movies, isLoading: false });\n//   };\n\n\n//   componentDidMount() {\n//     this.getMovies();\n//   }\n\n\n//   render() {\n//     const { isLoading, movies } = this.state;\n//     return (\n//       <div>\n//         {isLoading\n//           ? 'Loading...'\n//           : movies.map((movie) => {\n//             console.log(movie);\n//             return (\n//               <Movie\n//                 key={movie.id}\n//                 id={movie.id}\n//                 year={movie.year}\n//                 title={movie.title}\n//                 summary={movie.summary}\n//                 poster={movie.medium_cover_image}\n//               />\n//             );\n//           })}\n//       </div>\n//     );\n//   }\n// }\n\n\n//App 컴포넌트에 HTML (css를 입히기 위한 class 정의) 추가 -> Movie 컴포넌트도 HTML (css를 입히기 위한 class 정의) 추가\n// class App extends React.Component {\n//   state = {\n//     isLoading: true,\n//     movies: []\n//   };\n\n\n//   getMovies = async () => {\n//     const {\n//       data: {\n//         data: { movies }\n//       }\n//     } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n//     this.setState({ movies, isLoading: false });\n//   };\n\n\n//   componentDidMount() {\n//     this.getMovies();\n//   }\n\n\n//   render() {\n//     const { isLoading, movies } = this.state;\n//     return (\n//       <section class=\"container\">\n//         {isLoading ? (\n//           <div class=\"loader\">\n//             <span class=\"loader__text\">Loading...</span>\n//           </div>\n//         ) : (\n//           <div class=\"movies\">\n//             {movies.map(movie => (\n//               <Movie\n//                 key={movie.id}\n//                 id={movie.id}\n//                 year={movie.year}\n//                 title={movie.title}\n//                 summary={movie.summary}\n//                 poster={movie.medium_cover_image}\n//               />\n//             ))}\n//           </div>\n//         )}\n//       </section>\n//     );\n//   }\n// }\n\n\n// genres props 전달하기 + className으로 수정하기 + Movie.js 에서 genres 데이터 처리하기\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n    this.setState({ movies, isLoading: false });\n  };\n\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'; //내가만든 app.js에서 가져올거야\n\n//브라우저가 그릴 수 있게 렌더함수 갖다쓰자. \n//앱 컴퍼넌트 가지고 와서, html 파일의 getElementByID 아이디가 루트인 엘리먼트 가져와서, 렌더링할거야.\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals(); //이걸 왜 숨겨야 나오는지?"],"sourceRoot":""}