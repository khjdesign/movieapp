{"ast":null,"code":"var _jsxFileName = \"/Users/KAKAO/Desktop/reactProject/movieapp/src/7/src/Movie.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // css 임포트\n\nimport './Movie.css'; // Movie 컴포넌트 기본 구조 작성하기\n// function Movie() {\n//     return <h1></h1>;\n// }\n// Movie.PropTypes = {};\n// https://yts-proxy.now.sh/list_movies.json 에서 필요한 데이터의 키 찾기 + propTypes 작성하기\n// function Movie() {\n//     return <h1></h1>;\n// }\n// Movie.PropTypes = {\n//     id: PropTypes.number.isRequired,\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n// };\n// https://yts.mx/api#list_movies 에서 정렬하기 위한 요소 찾기\n// https://yts-proxy.now.sh/list_movies.json?sort_by=rating&order_by=asc 의 결과 확인\n// Movie 컴포넌트에 props 추가하기\n// function Movie({ id, title, year, summary, poster }) {\n//     return <h4>{title}</h4>;\n// }\n// Movie.propTypes = {\n//     id: PropTypes.number.isRequired,\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n// };\n//Movie 컴포넌트에 HTML (css를 입히기 위한 class 정의) 추가 + id props 삭제 + style={{ backgroundColor: 'red'}} 바로 적용해보기 \n// function Movie({title, year, summary, poster }) {\n//     return (\n//         <div class=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div class=\"movie__data\">\n//                 <h3 class=\"movie__title\">{title}</h3>\n//                 <h5 class=\"movie__year\">{year}</h5>\n//                 <p class=\"movie__summary\">{summary}</p>\n//             </div>\n//         </div>\n//     );\n// }\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n// };\n// 7주차 시작 - 장르 컴포넌트 추가하기 (API 에서 장르의 type 확인) + 에러 확인 (class, genres) + className 수정하기\n// function Movie({title, year, summary, poster, genres }) {\n//     return (\n//         <div className=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div className=\"movie__data\">\n//                 <h3 className=\"movie__title\">{title}</h3>\n//                 <h5 className=\"movie__year\">{year}</h5>\n//                 <p className=\"movie__summary\">{summary}</p>\n//             </div>\n//         </div>\n//     );\n// }\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired,\n//     genres: PropTypes.arrayOf(PropTypes.string).isRequired\n// };\n// 배열 형태로 담긴 장르 데이터를 리스트로 출력하기 + key 에러 확인\n// function Movie({title, year, summary, poster, genres }) {\n//     return (\n//         <div className=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div className=\"movie__data\">\n//                 <h3 className=\"movie__title\">{title}</h3>\n//                 <h5 className=\"movie__year\">{year}</h5>\n//                 <p className=\"movie__summary\">{summary}</p>\n//                 <ul className=\"movie__genres\">\n//                     {genres.map(genres => {\n//                         return (\n//                             <li className=\"movie__genres\">{genres}</li>\n//                         )\n//                     })}\n//                 </ul>\n//             </div>\n//         </div>\n//     );\n// }\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired,\n//     genres: PropTypes.arrayOf(PropTypes.string).isRequired\n// };\n// key 에러 수정\n// function Movie({ title, year, summary, poster, genres }) {\n//     return (\n//         <div className=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div className=\"movie__data\">\n//                 <h3 className=\"movie__title\">{title}</h3>\n//                 <h5 className=\"movie__year\">{year}</h5>\n//                 <p className=\"movie__summary\">{summary}</p>\n//                 <ul className=\"movie__genres\">\n//                     {genres.map((genres, index) => {\n//                         return (\n//                             <li key={index} className=\"movie__genre\">\n//                                 {genres}\n//                             </li>\n//                         )\n//                     })}\n//                 </ul>\n//             </div>\n//         </div>\n//     );\n// }\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired,\n//     genres: PropTypes.arrayOf(PropTypes.string).isRequired\n// };\n// css 꾸미기 : App.css 와 Movie.css\n// 화면에 보이는 문자 줄이기\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Movie({\n  title,\n  year,\n  summary,\n  poster,\n  genres\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: poster,\n      alt: title,\n      title: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie__data\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"movie__title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"movie__year\",\n        children: year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"movie__summary\",\n        children: [summary.slice(0, 180), \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"movie__genres\",\n        children: genres.map((genres, index) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"movie__genre\",\n            children: genres\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Movie;\nMovie.propTypes = {\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default Movie;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"sources":["/Users/KAKAO/Desktop/reactProject/movieapp/src/7/src/Movie.js"],"names":["React","PropTypes","Movie","title","year","summary","poster","genres","slice","map","index","propTypes","number","isRequired","string","arrayOf"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,OAAO,ae;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA,OAAf;AAAwBC,EAAAA,MAAxB;AAAgCC,EAAAA;AAAhC,CAAf,EAAyD;AACrD,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACI;AAAK,MAAA,GAAG,EAAED,MAAV;AAAkB,MAAA,GAAG,EAAEH,KAAvB;AAA8B,MAAA,KAAK,EAAEA;AAArC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA,kBAA8BA;AAA9B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA,kBAA6BC;AAA7B;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAG,QAAA,SAAS,EAAC,gBAAb;AAAA,mBAA+BC,OAAO,CAACG,KAAR,CAAc,CAAd,EAAiB,GAAjB,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAI,QAAA,SAAS,EAAC,eAAd;AAAA,kBACKD,MAAM,CAACE,GAAP,CAAW,CAACF,MAAD,EAASG,KAAT,KAAmB;AAC3B,8BACI;AAAgB,YAAA,SAAS,EAAC,cAA1B;AAAA,sBACKH;AADL,aAASG,KAAT;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH,SANA;AADL;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;KApBQR,K;AAuBTA,KAAK,CAACS,SAAN,GAAkB;AACdP,EAAAA,IAAI,EAAEH,SAAS,CAACW,MAAV,CAAiBC,UADT;AAEdV,EAAAA,KAAK,EAAEF,SAAS,CAACa,MAAV,CAAiBD,UAFV;AAGdR,EAAAA,OAAO,EAAEJ,SAAS,CAACa,MAAV,CAAiBD,UAHZ;AAIdP,EAAAA,MAAM,EAAEL,SAAS,CAACa,MAAV,CAAiBD,UAJX;AAKdN,EAAAA,MAAM,EAAEN,SAAS,CAACc,OAAV,CAAkBd,SAAS,CAACa,MAA5B,EAAoCD;AAL9B,CAAlB;AAQA,eAAeX,KAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// css 임포트\nimport './Movie.css';\n\n\n// Movie 컴포넌트 기본 구조 작성하기\n// function Movie() {\n//     return <h1></h1>;\n// }\n\n// Movie.PropTypes = {};\n\n\n// https://yts-proxy.now.sh/list_movies.json 에서 필요한 데이터의 키 찾기 + propTypes 작성하기\n// function Movie() {\n//     return <h1></h1>;\n// }\n\n// Movie.PropTypes = {\n//     id: PropTypes.number.isRequired,\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n// };\n\n\n// https://yts.mx/api#list_movies 에서 정렬하기 위한 요소 찾기\n// https://yts-proxy.now.sh/list_movies.json?sort_by=rating&order_by=asc 의 결과 확인\n\n\n// Movie 컴포넌트에 props 추가하기\n// function Movie({ id, title, year, summary, poster }) {\n//     return <h4>{title}</h4>;\n// }\n\n\n// Movie.propTypes = {\n//     id: PropTypes.number.isRequired,\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n// };\n\n\n//Movie 컴포넌트에 HTML (css를 입히기 위한 class 정의) 추가 + id props 삭제 + style={{ backgroundColor: 'red'}} 바로 적용해보기 \n// function Movie({title, year, summary, poster }) {\n//     return (\n//         <div class=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div class=\"movie__data\">\n//                 <h3 class=\"movie__title\">{title}</h3>\n//                 <h5 class=\"movie__year\">{year}</h5>\n//                 <p class=\"movie__summary\">{summary}</p>\n//             </div>\n//         </div>\n//     );\n// }\n\n\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n// };\n\n\n// 7주차 시작 - 장르 컴포넌트 추가하기 (API 에서 장르의 type 확인) + 에러 확인 (class, genres) + className 수정하기\n// function Movie({title, year, summary, poster, genres }) {\n//     return (\n//         <div className=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div className=\"movie__data\">\n//                 <h3 className=\"movie__title\">{title}</h3>\n//                 <h5 className=\"movie__year\">{year}</h5>\n//                 <p className=\"movie__summary\">{summary}</p>\n//             </div>\n//         </div>\n//     );\n// }\n\n\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired,\n//     genres: PropTypes.arrayOf(PropTypes.string).isRequired\n// };\n\n\n// 배열 형태로 담긴 장르 데이터를 리스트로 출력하기 + key 에러 확인\n// function Movie({title, year, summary, poster, genres }) {\n//     return (\n//         <div className=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div className=\"movie__data\">\n//                 <h3 className=\"movie__title\">{title}</h3>\n//                 <h5 className=\"movie__year\">{year}</h5>\n//                 <p className=\"movie__summary\">{summary}</p>\n//                 <ul className=\"movie__genres\">\n//                     {genres.map(genres => {\n//                         return (\n//                             <li className=\"movie__genres\">{genres}</li>\n//                         )\n//                     })}\n//                 </ul>\n//             </div>\n//         </div>\n//     );\n// }\n\n\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired,\n//     genres: PropTypes.arrayOf(PropTypes.string).isRequired\n// };\n\n\n// key 에러 수정\n// function Movie({ title, year, summary, poster, genres }) {\n//     return (\n//         <div className=\"movie\">\n//             <img src={poster} alt={title} title={title} />\n//             <div className=\"movie__data\">\n//                 <h3 className=\"movie__title\">{title}</h3>\n//                 <h5 className=\"movie__year\">{year}</h5>\n//                 <p className=\"movie__summary\">{summary}</p>\n//                 <ul className=\"movie__genres\">\n//                     {genres.map((genres, index) => {\n//                         return (\n//                             <li key={index} className=\"movie__genre\">\n//                                 {genres}\n//                             </li>\n//                         )\n//                     })}\n//                 </ul>\n//             </div>\n//         </div>\n//     );\n// }\n\n\n// Movie.propTypes = {\n//     year: PropTypes.number.isRequired,\n//     title: PropTypes.string.isRequired,\n//     summary: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired,\n//     genres: PropTypes.arrayOf(PropTypes.string).isRequired\n// };\n\n\n// css 꾸미기 : App.css 와 Movie.css\n\n\n// 화면에 보이는 문자 줄이기\nfunction Movie({ title, year, summary, poster, genres }) {\n    return (\n        <div className=\"movie\">\n            <img src={poster} alt={title} title={title} />\n            <div className=\"movie__data\">\n                <h3 className=\"movie__title\">{title}</h3>\n                <h5 className=\"movie__year\">{year}</h5>\n                <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n                <ul className=\"movie__genres\">\n                    {genres.map((genres, index) => {\n                        return (\n                            <li key={index} className=\"movie__genre\">\n                                {genres}\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\n\nMovie.propTypes = {\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default Movie;"]},"metadata":{},"sourceType":"module"}