{"ast":null,"code":"var _jsxFileName = \"/Users/KAKAO/Desktop/reactProject/movieapp/src/7/src/App.js\";\nimport React from 'react'; // axios import 하기, axios : HTTP통신(API 호출)을 지원하는 Javascript 라이브러리\n\nimport axios from 'axios'; // Movie 컴포넌트 임포트\n\nimport Movie from './Movie'; // css 임포트\n\nimport './App.css'; // 6주차 미진행 부분 계속\n// setState : state 내의 movies에 API 호출 결과인 response data(data.data.movies) 저장하기 + Movie 컴포넌트 만들러 가기\n// class App extends React.Component {\n//   state = {\n//     isLoading: true,\n//     movies: []\n//   };\n//   getMovies = async () => {\n//     const {\n//       data: {\n//         data: { movies }\n//       }\n//     } = await axios.get('https://yts-proxy.now.sh/list_movies.json');\n//     // this.setState({ movies: movies })\n//     // 객체키와 변수명이 같을 때 축약하기 \n//     // this.setState({ movies })\n//     // isLoding state도 변경하기\n//     this.setState({ movies, isLoading: false });\n//   };\n//   componentDidMount() {\n//     this.getMovies();\n//   }\n//   render() {\n//     const { isLoading } = this.state;\n//     return <div>{isLoading ? 'Loading...' : 'We are ready'}</div>;\n//   }\n// }\n// App 컴포넌트에서 Movie 컴포넌트 그리기 + map() 함수 사용하기 + Movie 컴포넌트를 반환하기 + Movie 컴포넌트에 props 전달하기   \n// class App extends React.Component {\n//   state = {\n//     isLoading: true,\n//     movies: []\n//   };\n//   getMovies = async () => {\n//     const {\n//       data: {\n//         data: { movies }\n//       }\n//     } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n//     this.setState({ movies, isLoading: false });\n//   };\n//   componentDidMount() {\n//     this.getMovies();\n//   }\n//   render() {\n//     const { isLoading, movies } = this.state;\n//     return (\n//       <div>\n//         {isLoading\n//           ? 'Loading...'\n//           : movies.map((movie) => {\n//             console.log(movie);\n//             return (\n//               <Movie\n//                 key={movie.id}\n//                 id={movie.id}\n//                 year={movie.year}\n//                 title={movie.title}\n//                 summary={movie.summary}\n//                 poster={movie.medium_cover_image}\n//               />\n//             );\n//           })}\n//       </div>\n//     );\n//   }\n// }\n//App 컴포넌트에 HTML (css를 입히기 위한 class 정의) 추가 -> Movie 컴포넌트도 HTML (css를 입히기 위한 class 정의) 추가\n// class App extends React.Component {\n//   state = {\n//     isLoading: true,\n//     movies: []\n//   };\n//   getMovies = async () => {\n//     const {\n//       data: {\n//         data: { movies }\n//       }\n//     } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n//     this.setState({ movies, isLoading: false });\n//   };\n//   componentDidMount() {\n//     this.getMovies();\n//   }\n//   render() {\n//     const { isLoading, movies } = this.state;\n//     return (\n//       <section class=\"container\">\n//         {isLoading ? (\n//           <div class=\"loader\">\n//             <span class=\"loader__text\">Loading...</span>\n//           </div>\n//         ) : (\n//           <div class=\"movies\">\n//             {movies.map(movie => (\n//               <Movie\n//                 key={movie.id}\n//                 id={movie.id}\n//                 year={movie.year}\n//                 title={movie.title}\n//                 summary={movie.summary}\n//                 poster={movie.medium_cover_image}\n//               />\n//             ))}\n//           </div>\n//         )}\n//       </section>\n//     );\n//   }\n// }\n// genres props 전달하기 + className으로 수정하기 + Movie.js 에서 genres 데이터 처리하기\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true,\n      movies: []\n    };\n\n    this.getMovies = async () => {\n      const {\n        data: {\n          data: {\n            movies\n          }\n        }\n      } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n      this.setState({\n        movies,\n        isLoading: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  render() {\n    const {\n      isLoading,\n      movies\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"loader__text\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movies\",\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(Movie, {\n          id: movie.id,\n          year: movie.year,\n          title: movie.title,\n          summary: movie.summary,\n          poster: movie.medium_cover_image,\n          genres: movie.genres\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/KAKAO/Desktop/reactProject/movieapp/src/7/src/App.js"],"names":["React","axios","Movie","App","Component","state","isLoading","movies","getMovies","data","get","setState","componentDidMount","render","map","movie","id","year","title","summary","medium_cover_image","genres"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AACA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,SAAS,EAAE,IADL;AAENC,MAAAA,MAAM,EAAE;AAFF,KADwB;;AAAA,SAOhCC,SAPgC,GAOpB,YAAY;AACtB,YAAM;AACJC,QAAAA,IAAI,EAAE;AACJA,UAAAA,IAAI,EAAE;AAAEF,YAAAA;AAAF;AADF;AADF,UAIF,MAAMN,KAAK,CAACS,GAAN,CAAU,0DAAV,CAJV;AAKA,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,MAAF;AAAUD,QAAAA,SAAS,EAAE;AAArB,OAAd;AACD,KAd+B;AAAA;;AAiBhCM,EAAAA,iBAAiB,GAAG;AAClB,SAAKJ,SAAL;AACD;;AAGDK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAwB,KAAKF,KAAnC;AACA,wBACE;AAAS,MAAA,SAAS,EAAC,WAAnB;AAAA,gBACGC,SAAS,gBACR;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACE;AAAM,UAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADQ,gBAKR;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,kBACGC,MAAM,CAACO,GAAP,CAAWC,KAAK,iBACf,QAAC,KAAD;AAEE,UAAA,EAAE,EAAEA,KAAK,CAACC,EAFZ;AAGE,UAAA,IAAI,EAAED,KAAK,CAACE,IAHd;AAIE,UAAA,KAAK,EAAEF,KAAK,CAACG,KAJf;AAKE,UAAA,OAAO,EAAEH,KAAK,CAACI,OALjB;AAME,UAAA,MAAM,EAAEJ,KAAK,CAACK,kBANhB;AAOE,UAAA,MAAM,EAAEL,KAAK,CAACM;AAPhB,WACON,KAAK,CAACC,EADb;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,YADF;AAuBD;;AA/C+B;;AAmDlC,eAAeb,GAAf","sourcesContent":["import React from 'react';\n// axios import 하기, axios : HTTP통신(API 호출)을 지원하는 Javascript 라이브러리\nimport axios from 'axios';\n// Movie 컴포넌트 임포트\nimport Movie from './Movie';\n// css 임포트\nimport './App.css';\n\n// 6주차 미진행 부분 계속\n// setState : state 내의 movies에 API 호출 결과인 response data(data.data.movies) 저장하기 + Movie 컴포넌트 만들러 가기\n// class App extends React.Component {\n//   state = {\n//     isLoading: true,\n//     movies: []\n//   };\n\n\n//   getMovies = async () => {\n//     const {\n//       data: {\n//         data: { movies }\n//       }\n//     } = await axios.get('https://yts-proxy.now.sh/list_movies.json');\n//     // this.setState({ movies: movies })\n//     // 객체키와 변수명이 같을 때 축약하기 \n//     // this.setState({ movies })\n//     // isLoding state도 변경하기\n//     this.setState({ movies, isLoading: false });\n//   };\n\n\n//   componentDidMount() {\n//     this.getMovies();\n//   }\n\n\n//   render() {\n//     const { isLoading } = this.state;\n//     return <div>{isLoading ? 'Loading...' : 'We are ready'}</div>;\n//   }\n// }\n\n\n// App 컴포넌트에서 Movie 컴포넌트 그리기 + map() 함수 사용하기 + Movie 컴포넌트를 반환하기 + Movie 컴포넌트에 props 전달하기   \n// class App extends React.Component {\n//   state = {\n//     isLoading: true,\n//     movies: []\n//   };\n\n\n//   getMovies = async () => {\n//     const {\n//       data: {\n//         data: { movies }\n//       }\n//     } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n//     this.setState({ movies, isLoading: false });\n//   };\n\n\n//   componentDidMount() {\n//     this.getMovies();\n//   }\n\n\n//   render() {\n//     const { isLoading, movies } = this.state;\n//     return (\n//       <div>\n//         {isLoading\n//           ? 'Loading...'\n//           : movies.map((movie) => {\n//             console.log(movie);\n//             return (\n//               <Movie\n//                 key={movie.id}\n//                 id={movie.id}\n//                 year={movie.year}\n//                 title={movie.title}\n//                 summary={movie.summary}\n//                 poster={movie.medium_cover_image}\n//               />\n//             );\n//           })}\n//       </div>\n//     );\n//   }\n// }\n\n\n//App 컴포넌트에 HTML (css를 입히기 위한 class 정의) 추가 -> Movie 컴포넌트도 HTML (css를 입히기 위한 class 정의) 추가\n// class App extends React.Component {\n//   state = {\n//     isLoading: true,\n//     movies: []\n//   };\n\n\n//   getMovies = async () => {\n//     const {\n//       data: {\n//         data: { movies }\n//       }\n//     } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n//     this.setState({ movies, isLoading: false });\n//   };\n\n\n//   componentDidMount() {\n//     this.getMovies();\n//   }\n\n\n//   render() {\n//     const { isLoading, movies } = this.state;\n//     return (\n//       <section class=\"container\">\n//         {isLoading ? (\n//           <div class=\"loader\">\n//             <span class=\"loader__text\">Loading...</span>\n//           </div>\n//         ) : (\n//           <div class=\"movies\">\n//             {movies.map(movie => (\n//               <Movie\n//                 key={movie.id}\n//                 id={movie.id}\n//                 year={movie.year}\n//                 title={movie.title}\n//                 summary={movie.summary}\n//                 poster={movie.medium_cover_image}\n//               />\n//             ))}\n//           </div>\n//         )}\n//       </section>\n//     );\n//   }\n// }\n\n\n// genres props 전달하기 + className으로 수정하기 + Movie.js 에서 genres 데이터 처리하기\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n    this.setState({ movies, isLoading: false });\n  };\n\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}